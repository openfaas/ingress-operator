/*
Copyright 2023 OpenFaaS Author(s)

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// FunctionIngressSpecApplyConfiguration represents an declarative configuration of the FunctionIngressSpec type for use
// with apply.
type FunctionIngressSpecApplyConfiguration struct {
	Domain        *string                               `json:"domain,omitempty"`
	Function      *string                               `json:"function,omitempty"`
	Path          *string                               `json:"path,omitempty"`
	IngressType   *string                               `json:"ingressType,omitempty"`
	TLS           *FunctionIngressTLSApplyConfiguration `json:"tls,omitempty"`
	BypassGateway *bool                                 `json:"bypassGateway,omitempty"`
}

// FunctionIngressSpecApplyConfiguration constructs an declarative configuration of the FunctionIngressSpec type for use with
// apply.
func FunctionIngressSpec() *FunctionIngressSpecApplyConfiguration {
	return &FunctionIngressSpecApplyConfiguration{}
}

// WithDomain sets the Domain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Domain field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithDomain(value string) *FunctionIngressSpecApplyConfiguration {
	b.Domain = &value
	return b
}

// WithFunction sets the Function field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Function field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithFunction(value string) *FunctionIngressSpecApplyConfiguration {
	b.Function = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithPath(value string) *FunctionIngressSpecApplyConfiguration {
	b.Path = &value
	return b
}

// WithIngressType sets the IngressType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IngressType field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithIngressType(value string) *FunctionIngressSpecApplyConfiguration {
	b.IngressType = &value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithTLS(value *FunctionIngressTLSApplyConfiguration) *FunctionIngressSpecApplyConfiguration {
	b.TLS = value
	return b
}

// WithBypassGateway sets the BypassGateway field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BypassGateway field is set to the value of the last call.
func (b *FunctionIngressSpecApplyConfiguration) WithBypassGateway(value bool) *FunctionIngressSpecApplyConfiguration {
	b.BypassGateway = &value
	return b
}
